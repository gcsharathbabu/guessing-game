use std::io;
use rand::Rng;
use std::cmp::Ordering;

fn main() {
    println!("Guess the number");
    //Defining an immutable integer
    let secrect_num = rand::thread_rng().gen_range(1..101);
    //Alt `let secrect_num = rand::thread_rng().gen_range)(1..=100);`
    //Print the output generated by rand library from 1 to 100
    println!("Secrect number: {}", secrect_num);
    //Looping the below set of statements until ctrl+C is entered
    loop {
        //Take input from io::stdin() into guess
        println!("Please input your guess");
        let mut guess = String::new();
        io::stdin()
            //Result is read into guess. Possible results include Ok & Err enums
            //Ok's value is unboxed into guess
            .read_line(&mut guess)
            //Upon Err execute .except
            .expect("Failed to readline");
        //Shadow the already defined variable guess and bind it to the integer
        //trim().parse trims \n or \r\n from the input variable
        // Alt! let guess: i32 = guess.trim().parse().expect("Enter a number!");
        let guess: i32 = match guess.trim().parse() {
            Ok(num) => num,
            //Handling a non-number value instead of crashing the program
            Err(_) => continue,
        };
        println!("You guessed {}", guess);
        //match & compare using Ordering
        match guess.cmp(&secrect_num) {
            Ordering::Less => println!("Too small"),
            Ordering::Greater => println!("Too Big"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}
